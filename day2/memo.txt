* use of assert()

* I'm not sure why the item behave as an instance of Item Class.
* Also, I'm not sure how to use the property (like hoge.property)

* nextとitemの
* the structure of |next| and |item|

* In the way original do, I think delete() can't run in time of O(1)
* Therefore, I changed the put function

* when I put key to the hash table, idx is always 0. why???

* Even if the item in the hash table uses 30% or less of it, you don't rehash it if the size of it is under 100??

* In put method, there are check_size method. This means you mustn't make new hash table to rehash the current one??

* the runtime of performance_test() is too long(In fact, it doesn't end in more than 1h)
* Cause: rehashing method doesn't work (it didn't change the bucket size!!!)

* deleted item continues to exist, though its key and value are its next.items'

* wrong rehashing 
    def original_rehashing(self, new_bucket_size, item_count):
        item_list = []
        for idx in range(self.bucket_size):
            item = self.buckets[idx]
            while item:
                item_list.append([item.key, item.value])
                item = item.next

        new_hash_table = HashTable(new_bucket_size, item_count)
        for item in item_list:
            key, value = item
            new_hash_table.put(key, value)
            new_hash_table.item_count -= 1
        self = new_hash_table  # 自分のクラスの中では自分を上書きできない
        # selfは自分のインスタンスを指す. not object
        # selfはreference


* rehashing's time complexity is O(n)
* Is it OK?